#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    Node* next;
    int data;
    Node* back;
    
    public:
    Node(int data1,Node* next1=nullptr,Node* back1=nullptr)
    {
        next=next1;
        data=data1;
        back=back1;
    }
};

Node* arr2ll(vector<int>v)
{
    Node* head=new Node(v[0]);
    Node* prev=head;
    
    for(int i=1;i<v.size();++i)
    {
        Node* temp=new Node(v[i],nullptr,prev);
        prev->next=temp;
        prev=temp;
        
    }
    return head;
}

Node* deletehead(Node* head)
{
    Node* temp=head;
    head=head->next;
    head->back=nullptr;
    temp->next=nullptr;
    delete temp;
    return head;
}

Node* deletetail(Node* head)
{
    Node* tail=head;
    
    while(tail->next)
    {
        tail=tail->next;
    }
    Node* prev=tail->back;
    prev->next=nullptr;
    tail->back=nullptr;
    delete tail;
    return head;
}

Node* deletekthnode(Node* head, int k)
{
    if(head==NULL) return NULL;
    
    Node* temp=head;
    int cnt=0;
    
    while(temp)
    {
        cnt++;
        if(cnt==k) break;
        temp=temp->next;
    }
    
    Node* prev=temp->back;
    Node* front=temp->next;
    
    if(prev==NULL && front==NULL) return NULL;
    else if(prev==NULL) return deletehead(head);
    else if(front==NULL) return deletetail(head);
    
    prev->next=front;
    front->back=prev;
    temp->back=NULL;
    temp->next=NULL;
    delete temp;
    
    return head;
}

void deletenode(Node* temp)
{
    Node* prev=temp->back;
    Node* front=temp->next;
    
    if(front==NULL)
    {
        prev->next=nullptr;
        temp->back=nullptr;
        delete temp;
        return;
    }
    prev->next=front;
    front->back=prev;
    temp->next=temp->back=nullptr;
    delete temp;
}

Node* insertbeforehead(Node* head, int val)
{
    Node* newhead=new Node(val,head,nullptr);
    head->back=newhead;
    
    return newhead;
}

Node* insertbeforetail(Node* head, int val)
{
    Node* temp=head;
    while(temp->next)
    {
        temp=temp->next;
    }
    Node* prev=temp->back;
    Node* newnode=new Node(val,temp,prev);
    prev->next=newnode;
    temp->back=newnode;
    return head;
    
}

Node* insertbeforekthelement(Node* head, int k, int val)
{
    if(k==1)
    {
        return insertbeforehead(head,val);
    }
    Node* temp=head;
    int cnt=0;
    while(temp)
    {
        cnt++;
        if(cnt==k) break;
        temp=temp->next;
    }
    Node* prev=temp->back;
    Node* newnode=new Node(val,temp,prev);
    prev->next=newnode;
    temp->back=newnode;
    return head;
}

void insertbeforenode(Node* temp, int val)
{
    Node* prev=temp->back;
    Node* newnode=new Node(val,temp,prev);
    prev->next=newnode;
    temp->back=newnode;
}
void print(Node* head)
{
    while(head)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}

int main()
{
    vector<int>v={13,23,33,43,53};
    Node* head=arr2ll(v);
    insertbeforenode(head->next->next->next,333);
    //head=insertbeforekthelement(head,5,11);
    print(head);
}